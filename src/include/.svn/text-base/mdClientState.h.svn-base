// mdClientState.h - xmlrpc-c C++ proxy class
// Auto-generated by xml-rpc-api2cpp.

#ifndef _mdClientState_H_
#define _mdClientState_H_ 1

#include <xmlrpc-c/oldcppwrapper.hpp>

class mdClientState {
    XmlRpcClient mClient;

public:
    mdClientState (const XmlRpcClient& client)
        : mClient(client) {}
    mdClientState (const std::string& server_url)
        : mClient(XmlRpcClient(server_url)) {}
    mdClientState (const mdClientState& o)
        : mClient(o.mClient) {}

    mdClientState& operator= (const mdClientState& o) {
        if (this != &o) mClient = o.mClient;
        return *this;
    }

    /* Accepts a device handle and returns the version identification of the MD.  */
    XmlRpcValue::int32 getMDversion (std::string const string1);

    /* Given a device handle, type, and dataname create the element. The type string uses the standard xmplrpc-c single character  type signatures which if preceed by an underscore implies an operational data element otherwise it's an observable. Any text following the type signature is preserved as a comment. Answers 'OK' or error text */
    std::string create (XmlRpcValue::int32 const int1, std::string const string2, std::string const string3);

    /* Send handle, dataname, get structure answer. The dataname can  be prefixed by a non-alphabetic mode character. The first  entry in the structure is always the state of the call which will either the supplied dataname indicating success or error text. The remainder of the structure is specific to the API. */
    XmlRpcValue /*struct*/ get (XmlRpcValue::int32 const int1, std::string const string2);

    /* Process a gotten  structure with changes. Answers 'OK' or error text */
    std::string set (XmlRpcValue::int32 const int1, XmlRpcValue /*struct*/ struct2);
};

#endif /* _mdClientState_H_ */

