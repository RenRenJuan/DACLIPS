// mdClientDevice.h - xmlrpc-c C++ proxy class
// Auto-generated by xml-rpc-api2cpp.

#ifndef _mdClientDevice_H_
#define _mdClientDevice_H_ 1

#include <xmlrpc-c/oldcppwrapper.hpp>

class mdClientDevice {
    XmlRpcClient mClient;

public:
    mdClientDevice (const XmlRpcClient& client)
        : mClient(client) {}
    mdClientDevice (const std::string& server_url)
        : mClient(XmlRpcClient(server_url)) {}
    mdClientDevice (const mdClientDevice& o)
        : mClient(o.mClient) {}

    mdClientDevice& operator= (const mdClientDevice& o) {
        if (this != &o) mClient = o.mClient;
        return *this;
    }

    /* Register a device with the auc-md. The first parameter is the device type which is 0 for the MD_TYPE device and > 0 for all others. The string, which may be empty, specifies a particular model or version. This must be the first call to the MD after connecting. The response if positive is a handle to use in referring to the device otheriwse an error number. Use 'ALX' for an unversioned centrifuge, and the empty string to release any handle previously gotten with this API. In this case the first parameter is gotten handle not the device type.  */
    XmlRpcValue::int32 registeR (XmlRpcValue::int32 const int1, std::string const string2);
};

#endif /* _mdClientDevice_H_ */

